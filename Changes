Revision history for Perl extension Genealogy::Gedcom::Date.

2.00  Tue Oct 13 20:43:00 2015
	- Re-write using Marpa::R2, which uses the Gedcom grammar to define dates.
	- Remove methods: parse_approximate_date(), parse_date_escape(), parse_datetime(),
		parse_date_period(), parse_date_range(), parse_date_value(), parse_interpreted_date(),
		debug(), method_index(), months_in_gregorian() and style().
	- Add methods: parse(), calendar(), error().
	- See the FAQ for the format of the value returned by parse().
	- See the FAQ for various extensions to the Gedcom grammar.
	- Accept Unicode input.
	- Add support for French and German dates.
	- Accept date escapes with or without '@#d' ... '@'.
	- Accept dates and escapes in any case.
	- Remove all reference to DateTime.
	- Remove code which supplied a default day and/or month when they were missing.
	- Add scripts/synopsis.pl.
	- Rewrite all tests. See t/English.t, etc.
	- Reduce the max line length of this file, and of the docs, to (an arbitrary) 100 chars.

1.16  Wed Sep 30 10:14:00 2015
	- Expand parse_datetime() so it accepts either a string or a hash.
	- Expand docs to match.
	- Expand t/date.t to test both an American date and the above.
	- Fix bug whereby ',' in dates was deleted but should have been replaced by ' '.
		See t/date.t for this case: December 13,1668. Zapping the ',' gives December 131668!
	- Correct FAQ re Hash::FieldHash since I now use Moo.

1.15  Mon Sep 28 08:58:00 2015
	- Remove \n from all die messages, as suggested by Nigel Horne. See discussion in #RT107354.
		I'm doing this assuming well-written code will capture all the dies, so the issue of
		leaking information to users of CGI scripts does not arise.

1.14  Fri Aug 28 11:34:00 2015
	- Change logic of how we proceed after all parse methods have died, so that our own object
		can still be used.
		Thanx to Nigel Horne for reporting this. See RT#106705.
	- Add below thanx to Nigel for reporting the locale issue (see V 1.13), and the code fix.

1.13  Fri Aug 28 10:08:00 2015
	- Honour the $ENV{LANG} value, if set, when creating DateTime objects.
		Thanx to Nigel Horne for reporting this. See RT#106703.
	- Add a note about $ENV{LANG} at the start of the FAQ.
	- Reformat the POD, so lines are at most 100 chars wide.
	- Clean up Makefile.PL so it references the github repo.
	- Add repo to docs.
	- Remove Build.PL.

1.12  Sun May 10 12:00:00 2015
	- No code changes.
	- Bump required version of DateTime from V 1.03 to V 1.18, hoping this fixes all the
		CPAN tester fail reports. This change /really/ should have been in the last version.

1.11  Tue Apr 28 17:14:00 2015
	- Use Config.pm to tell us which version of Perl is being used, and if it's >= 5.21.11,
		then use 'Inf' and '-Inf', otherwise use 'inf' and '-inf'.
	- Test with Perls V 5.10.1, 5.20.2 and 5.21.11.

1.10  Tue Apr 28 16:06:00 2015
	- Update META.json and META.yml.

1.09  Tue Apr 28 11:14:20 2015
	- Test under Perl V 5.21.11. See RT#103959.
	- Deal with test failures relating to Inf under Perl V 5.21.11.
		This involves using 'Inf' instead of 'inf', and '-Inf' instead of '-inf'.
	- Switch from Hash::FieldHash to Moo and Types::Standard (i.e. Type::Tiny).
	- Add github repo Genealogy-Gedcom-Date. This involves updating Build.PL and Makefile.PL.
	- Move t/pod.t to xt/author/pod.t. This involves making Test::Pod optional.

1.08  Wed Jun 26 11:00:00 2013
	- Rename CHANGES to Changes as per CPAN::Changes::SPEC.
	- Update pre-preqs' version #s, especially for DateTime and DateTime::Infinite, to see if that
		fixes mysterious CPAN Tester failures with t/date.t's use of '15 Jul 1954'.

1.07  Fri Mar 23 16:51:00 2012
	- Patch code and tests for Solaris, where Data::Infinite::(Past, Future) return '-Infinity' and
		'Infinity'.
	- Turn off debug in tests.

1.06  Thu Mar 22 09:18:00 2012
	- No code changes. No need to upgrade.
	- The only patch is that debug is enabled in all test scripts. The point is to report as much
		information as possible when CPAN Testers using Solaris run tests. Unfortunately, no CPAN
		Tester in this situation has responded to my direct emails, so I'm using this mechanism to
		get the info I need. This is all part of the mess MS Windows and Solaris make when failing
		to handle Data::Infinite::(Past, Future). The next version will of course just have debug
		turned off again, along with a Solaris fix. After that, I never want to hear about this
		problem again.

1.05  Sat Mar 17 17:29:00 2012
	- CPAN testing showed more cases where the patches in V 1.02 had to be applied.

1.04  Fri Mae 16 14:37:00 2012
	- Aggghhhh. Fix tests to match fix in V 1.03. Tests worked under Debian of course.

1.03  Wed Mar 14 17:16:00 2012
	- Add complexity to the fix for problems to Data::Infinite::(Past, Future) for OSes:
		o Win32::GetOSName = Win7
		o Win32::GetOSName = WinXP/.Net

1.02  Tue Mar 13 08:57:00 2012
	- Bump pre-reqs for DateTime and DateTime::Inifinite from V 0.70 to V 0.72, since these are the
		latest (today).
	- Fix sub _init_flags() for systems where DateTime::Infinite::Past is returned as '-1.#INF'
		instead of '-inf'. For testing, this only affects the 2 tests in t/escape.t where we expect
		'-inf' as the output for one_date.
		For end users of course, the change in sub _init_flags() is what matters.
	- Update the docs to explain that '-inf' is returned even when the system returns '-1.#INF'.

1.01  Wed Feb 29 09:35:00 2012
	  - No code changes.
	  - Update pre-req Hash::FieldHash from V 0.10 to V 0.12, in presumably hopeless attempt to
		rectify a CPAN Tester report about failure under MS Windows.
	  	See: http://www.cpantesters.org/cpan/report/9c177958-6ca0-1014-a634-88fc0063837e. The code
		tests perfectly on my Debian stable system.

1.00  Thu Sep 20 13:47:00 2011
	  - Initial release. This is an updated version of DateTime::Format::Gedcom V 1.00.
	  	This latter module is deprecated. Details in the FAQ.
	  - Changes since DateTime::Format::Gedcom:
	  	o The hashref returned by the parse_*() methods includes 4 new keys:
		  one_default_day, one_default_month, two_default_day and two_default_month.
		  This allows the caller to determine whether or not the code inserted a day
		  and/or month into an incomplete date. Years are never inserted into dates.
		  This matches a feature available in Gedcom::Date, but with a completely
		  different implementation.
		o There is a new parameter 'style' passable into new() and the parse_*() methods.
		  It takes the values 'american', 'english' and 'standard', to allow the code
		  to expect dates formatted in various ways. The parameter is not called
		  format because I have plans to use format as the name for a parameter which
		  will allow to user to specify the output format of the dates.
		  american => Expect 'month day year', as in From Jan 2 2011 BC to Mar 4 2011.
		  english  => Expect 'day month year', as in From 1 Jan 2001 to 25 Dec 2002.
		  standard => Expect 'year month day', as in From 2011-01-02 to 2011-03-04.
		  See t/style.t for sample code.
		o Gregorian is the only supported date escape. Every date escape triggers
		  processing using Gregorian month names and abbreviations.
		o DateTime::Format::Natural is no longer used. Instead, the incoming date is
		  split on [ -\/] rather than just [ -], and this module tries to parse it.
		o All commas are deleted from incoming dates.
		o BC may be written as BCE.
		o Some dates which are not ambiguous, e.g. 2011-01-01, were wrongly flagged
		  as ambiguous. Thanx to Eugene van der Pijll for alerting me to this bug.
